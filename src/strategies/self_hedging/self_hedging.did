type Exchange = variant {
  ICPSwap;
  KongSwap;
  Sonic;
  InfinitySwap;
  ICDex;
};

type TokenMetadata = record {
  canister_id : principal;
  symbol : text;
  decimals : nat8;
  standard : text;
  fee : nat;
};

type TradingPair = record {
  base_token : TokenMetadata;
  quote_token : TokenMetadata;
};

type OrderSplitType = variant {
  NoSplit;
  SplitBuy;
  SplitSell;
  SplitBoth;
};

type StrategyStatus = variant {
  Created;
  Running;
  Paused;
  EmergencyStopped;
  Terminated;
};

type StrategyResult = variant {
  Success;
  Error : text;
};

type SelfHedgingConfig = record {
  exchange : Exchange;
  trading_pair : TradingPair;
  transaction_size : nat;
  order_split_type : OrderSplitType;
  check_interval_secs : nat64;
  slippage_tolerance : float64;
};

type SelfHedgingState = record {
  owner : principal;
  config : SelfHedgingConfig;
  status : StrategyStatus;
  last_execution : opt nat64;
  execution_count : nat64;
  volume_generated : nat;
  order_split_type : OrderSplitType;
  transaction_size : nat;
  base_token_unused_balance : nat;
  quote_token_unused_balance : nat;
  last_balance_check : opt nat64;
};

type VolumeStats = record {
  total_volume : nat;
  execution_count : nat64;
  last_execution : opt nat64;
  transaction_size : nat;
  split_type : OrderSplitType;
  base_token_symbol : text;
  quote_token_symbol : text;
};

type BalanceInfo = record {
  base_token_unused : nat;
  quote_token_unused : nat;
  canister_balance : nat;
  last_update : opt nat64;
};

type TradingPairInfo = record {
  base_token_symbol : text;
  base_token_decimals : nat8;
  base_token_canister : principal;
  quote_token_symbol : text;
  quote_token_decimals : nat8;
  quote_token_canister : principal;
};

type StrategyConfigInfo = record {
  transaction_size : nat;
  order_split_type : OrderSplitType;
  check_interval_secs : nat64;
  slippage_tolerance : float64;
};

service : {
  // Initialization function
  init_self_hedging : (principal, SelfHedgingConfig) -> (StrategyResult);
  
  // Strategy control
  start : () -> (StrategyResult);
  pause : () -> (StrategyResult);
  stop : () -> (StrategyResult);
  execute_once : () -> (StrategyResult);
  
  // Status queries
  get_status : () -> (StrategyStatus) query;
  get_state : () -> (variant { Ok : SelfHedgingState; Err : text }) query;
  
  // Configuration updates
  update_config : (nat, OrderSplitType, nat64, float64) -> (StrategyResult);
  
  // Balance management
  deposit_to_exchange : (text, nat) -> (StrategyResult);
  withdraw_from_exchange : (text, nat) -> (StrategyResult);
  get_balance_info : () -> (BalanceInfo) query;
  refresh_balance : () -> (StrategyResult);
  
  // Trading pair information
  get_trading_pair_info : () -> (TradingPairInfo) query;
  get_strategy_config : () -> (StrategyConfigInfo) query;
  get_volume_stats : () -> (VolumeStats) query;
} 