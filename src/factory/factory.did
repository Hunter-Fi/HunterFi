type TokenMetadata = record {
  canister_id : principal;
  symbol : text;
  decimals : nat8;
};

type TradingPair = record {
  base_token : TokenMetadata;
  quote_token : TokenMetadata;
};

type Exchange = variant {
  ICPSwap;
  KongSwap;
  Sonic;
  InfinitySwap;
  ICDex;
};

type StrategyType = variant {
  DollarCostAveraging;
  ValueAveraging;
  FixedBalance;
  LimitOrder;
  SelfHedging;
};

type OrderType = variant {
  Buy;
  Sell;
};

type OrderSplitType = variant {
  NoSplit;
  SplitBuy;
  SplitSell;
  SplitBoth;
};

type StrategyStatus = variant {
  Created;
  Running;
  Paused;
  EmergencyStopped;
  Terminated;
};

type DeploymentStatus = variant {
  PaymentReceived;
  CanisterCreated;
  CodeInstalled;
  Initialized;
  Deployed;
  DeploymentFailed;
  Refunded;
};

type StrategyMetadata = record {
  canister_id : principal;
  strategy_type : StrategyType;
  owner : principal;
  created_at : nat64;
  status : StrategyStatus;
  exchange : Exchange;
  trading_pair : TradingPair;
};

type DeploymentRecord = record {
  deployment_id : text;
  strategy_type : StrategyType;
  owner : principal;
  fee_amount : nat64;
  request_time : nat64;
  status : DeploymentStatus;
  canister_id : opt principal;
  config_data : blob;
  error_message : opt text;
  last_updated : nat64;
};

type DeploymentRequest = record {
  deployment_id : text;
  fee_amount : nat64;
  strategy_type : StrategyType;
};

type DeploymentResult = variant {
  Success : principal;
  Error : text;
};

type DCAConfig = record {
  exchange : Exchange;
  base_token : TokenMetadata;
  quote_token : TokenMetadata;
  amount_per_execution : nat;
  interval_secs : nat64;
  max_executions : opt nat64;
  slippage_tolerance : float64;
};

type ValueAvgConfig = record {
  exchange : Exchange;
  base_token : TokenMetadata;
  quote_token : TokenMetadata;
  target_value_increase : nat;
  interval_secs : nat64;
  max_executions : opt nat64;
  slippage_tolerance : float64;
};

type FixedBalanceConfig = record {
  exchange : Exchange;
  token_allocations : vec record { TokenMetadata; float64 };
  rebalance_threshold : float64;
  interval_secs : nat64;
  slippage_tolerance : float64;
};

type LimitOrderConfig = record {
  exchange : Exchange;
  base_token : TokenMetadata;
  quote_token : TokenMetadata;
  order_type : OrderType;
  price : nat;
  amount : nat;
  expiration : opt nat64;
};

type SelfHedgingConfig = record {
  exchange : Exchange;
  trading_token : TokenMetadata;
  transaction_size : nat;
  order_split_type : OrderSplitType;
  check_interval_secs : nat64;
  slippage_tolerance : float64;
};

type WasmModule = record {
  strategy_type : StrategyType;
  wasm_module : blob;
};

type UserAccount = record {
  owner : principal;
  balance : nat64;
  last_deposit : nat64;
  total_deposited : nat64;
  total_consumed : nat64;
};

type TransactionType = variant {
  Deposit;
  DeploymentFee;
  Refund;
  AdminAdjustment;
};

type TransactionRecord = record {
  transaction_id : text;
  user : principal;
  amount : nat64;
  transaction_type : TransactionType;
  timestamp : nat64;
  description : text;
};

service : {
  // ===== Administration =====
  
  // Admin role management
  add_admin : (principal) -> (variant { Ok; Err : text });
  remove_admin : (principal) -> (variant { Ok; Err : text });
  get_admins : () -> (vec principal) query;
  is_caller_admin : () -> (bool) query;

  // WASM module management
  install_strategy_wasm : (WasmModule) -> (variant { Ok; Err : text });
  get_strategy_wasm : (StrategyType) -> (opt blob) query;

  // System maintenance
  reset_system_timers : () -> (variant { Ok; Err : text });
  get_timer_status : () -> (text) query;

  // Deployment fee management
  set_deployment_fee : (nat64) -> (variant { Ok; Err : text });
  get_deployment_fee : () -> (nat64) query;

  // ===== Strategy Deployment =====
  
  // Strategy deployment API
  request_dca_strategy : (DCAConfig) -> (variant { Ok : DeploymentRequest; Err : text });
  request_value_avg_strategy : (ValueAvgConfig) -> (variant { Ok : DeploymentRequest; Err : text });
  request_fixed_balance_strategy : (FixedBalanceConfig) -> (variant { Ok : DeploymentRequest; Err : text });
  request_limit_order_strategy : (LimitOrderConfig) -> (variant { Ok : DeploymentRequest; Err : text });
  request_self_hedging_strategy : (SelfHedgingConfig) -> (variant { Ok : DeploymentRequest; Err : text });
  force_execute_deployment : (text) -> (variant { Ok : DeploymentResult; Err : text });

  // ===== Strategy Management =====
  
  // Strategy registry queries
  get_strategies_by_owner : (principal) -> (vec StrategyMetadata) query;
  get_all_strategies : () -> (vec StrategyMetadata) query;
  get_strategy : (principal) -> (opt StrategyMetadata) query;
  get_strategy_count : () -> (nat64) query;

  // Deployment record management
  get_deployment_records : () -> (vec DeploymentRecord) query;
  get_my_deployment_records : () -> (vec DeploymentRecord) query;
  get_deployment : (text) -> (opt DeploymentRecord) query;

  // ===== Finance Management =====

  // Cycles & ICP management
  get_cycles_balance : () -> (nat64) query;
  withdraw_icp : (principal, nat64) -> (variant { Ok; Err : text });

  // User balance management
  deposit_icp : (nat64) -> (variant { Ok : nat64; Err : text });
  withdraw_user_icp : (nat64) -> (variant { Ok : nat64; Err : text });
  get_balance : () -> (nat64) query;
  get_account_info : () -> (opt UserAccount) query;
  get_transaction_history : () -> (vec TransactionRecord) query;
  adjust_balance : (principal, nat64, text) -> (variant { Ok; Err : text });
} 